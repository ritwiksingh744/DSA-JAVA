/*Quick Sort is a Divide and Conquer algorithm. It picks an element as pivot and partitions the given array *around the picked pivot.
*Given an array arr[], its starting position low and its ending position high.
*
*Implement the partition() and quickSort() functions to sort the array.
*
*Example 1:
*
*Input: 
*N = 5 
*arr[] = { 4, 1, 3, 9, 7}
*Output:
*1 3 4 7 9  */


import java.util.*;
class Sorting
{
	static void printArray(int arr[])
    {
        int n = arr.length;
        for (int i=0; i<n; ++i)
            System.out.print(arr[i]+" ");
        System.out.println();
    }
    
    // Driver program
    public static void main(String args[])
    {
		Scanner sc = new Scanner(System.in);
		int T = sc.nextInt();
		while(T>0)
		{
			int n = sc.nextInt();
			int arr[] = new int[n];
			for(int i=0;i<n;i++)
				arr[i] = sc.nextInt();

			
			new Solution().quickSort(arr,0,n-1);
			printArray(arr);
		    T--;
		}
} }// } Driver Code Ends


class Solution
{
    //Function to sort an array using quick sort algorithm.
    static void quickSort(int arr[], int low, int high)
    {
      
        if(low<high)
        {
            int p=partition(arr,low,high);
            quickSort(arr,low,p);
            quickSort(arr,p+1,high);
        }
    }
    static int partition(int arr[], int low, int high)
    {
       
        int pivot=arr[low];
        int i=low-1,j=high+1;
        while(true)
        {
            do{
                i++;
            }while(arr[i]<pivot);
            do{
                j--;
            }while(arr[j]>pivot);
            if(i>=j)
                return j;
            swap(arr,i,j);    
        }
    }
    static void swap(int arr[],int a,int b)
    {
        int c=arr[a];
        arr[a]=arr[b];
        arr[b]=c;
    }
}
// code by ritwik singh