/*Given a string S consisting of opening and closing parenthesis '(' and ')'. Find length of the longest *valid parenthesis substring.
*
*A parenthesis string is valid if:
*
*For every opening parenthesis, there is a closing parenthesis.
*Opening parenthesis must be closed in the correct order.
*Example 1:
*
*Input: S = ((()
*Output: 2
*Explaination: The longest valid 
*parenthesis substring is "()".
*/


import java.io.*;
import java.util.*;

class GFG{
    public static void main(String args[])throws IOException
    {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(in.readLine());
        while(t-- > 0){
            String S = in.readLine();
            
            Solution ob = new Solution();
            System.out.println(ob.maxLength(S));
        }
    }
}



class Solution{
    static int maxLength(String S){
        
        int n=S.length();
        int result=0;
        
        Stack<Integer> stk=new Stack<>();
        stk.push(-1);
        for(int i=0;i<n;i++)
        {
            if(S.charAt(i)=='(')
               stk.push(i);
            else
             {
                 if(!stk.empty())
                    stk.pop();
                if(!stk.empty())
                    result=Math.max(result, i-stk.peek());
                else
                  stk.push(i);
             }   
        }
        return result;
    }
}   //code by Ritwik Singh